name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # Allow incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Random American Name
        shell: powershell
        run: |
          # --- Random American Names ---
          $firstNames = @("James","John","Robert","Michael","William","David","Richard","Joseph","Thomas","Charles","Christopher","Daniel","Matthew","Anthony","Donald","Mark","Paul","Steven","Andrew","Kenneth","Joshua","Kevin","Brian","George","Edward","Ronald","Timothy","Jason","Jeffrey","Ryan","Jacob","Eric","Stephen","Justin","Scott","Brandon","Benjamin","Samuel","Gregory","Frank","Emma","Olivia","Sophia","Isabella","Ava","Mia","Charlotte","Amelia","Harper","Evelyn")
          $lastNames  = @("Smith","Johnson","Williams","Brown","Jones","Garcia","Miller","Davis","Rodriguez","Martinez","Hernandez","Lopez","Gonzalez","Wilson","Anderson","Thomas","Taylor","Moore","Jackson","Martin","Lee","Perez","Thompson","White","Harris","Sanchez","Clark","Ramirez","Lewis","Robinson","Walker","Young","Allen","King","Wright","Scott","Torres","Nguyen","Hill","Flores")

          $first = $firstNames | Get-Random
          $last  = $lastNames | Get-Random
          $fullName = "$first $last"
          $candidate = ($first + $last) -replace '[^A-Za-z0-9]',''
          if ($candidate.Length -gt 20) { $candidate = $candidate.Substring(0,20) }

          # Ensure username is unique
          $username = $candidate
          $attempt = 0
          while (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              $attempt++
              $username = "$candidate$((Get-Random -Minimum 10 -Maximum 99))"
              if ($attempt -gt 10) { Write-Error "Unable to find unique username"; exit 1 }
          }

          # --- Strong password generation ---
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper   | Get-Random -Count 4
          $rawPassword += $charSet.Lower   | Get-Random -Count 4
          $rawPassword += $charSet.Number  | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Create new local user
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -FullName $fullName -Description "Temporary RDP user"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          Add-LocalGroupMember -Group "Administrators" -Member $username

          # Export credentials to environment
          "RDP_USERNAME=$username" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_CREDS=User: $username | Password: $password" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "✅ Created user: $fullName ($username)"

      - name: Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i `"$installer`" /quiet /norestart" -Wait
          Remove-Item $installer -Force

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          $tailscalePath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"

          Write-Host "Starting Tailscale connection..."
          if ("${{ secrets.TAILSCALE_AUTH_KEY }}" -ne "") {
              Write-Host "Using provided TAILSCALE_AUTH_KEY..."
              & $tailscalePath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname --accept-routes --accept-dns=false
          } else {
              Write-Host "No TAILSCALE_AUTH_KEY found. Generating login link..."
              & $tailscalePath up --hostname=$hostname --accept-routes --accept-dns=false | Tee-Object -Variable output
              $link = ($output | Select-String -Pattern 'https://login.tailscale.com.*').Matches.Value
              if ($link) {
                  Write-Host "`n🔗 AUTH LINK: $link"
                  Write-Host "👉 Open this link in your browser to authenticate manually.`n"
              } else {
                  Write-Error "❌ Could not find login link in output."
              }
          }

          # Wait for IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & $tailscalePath ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Check if device is authorized."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "✅ Tailscale connected! IP: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) {
              Write-Error "TCP connection to port 3389 failed"
              exit 1
          }
          Write-Host "✅ TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "🔹 Address: $env:TAILSCALE_IP"
          Write-Host "🔹 Username: $env:RDP_USERNAME"
          Write-Host "🔹 Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"

          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Press Stop to terminate"
              Start-Sleep -Seconds 300
          }
